.landingpage
{
  --gapspace:16px;    // gaps between layout areas
  --gapspace-s:8px;   // smaller gaps between layout areas
  --ctrlspace:2px;    // small spacing for padding/margins between i.e. icon and label
  --corner:4px;       // borderradius
  --buttonsize:24px;  // base size of a button, including icon (svg may be smaller, but relates to 24x24 design scale)
  --accent-color: var(--vscode-notebook-cellInsertionIndicator); // blue highlight or action indicator color
  --danger-color: #d50000;

  div[data-prototype]
  {
    display: none !important;
  }

  user-select: none;
  *
  {
    transition: outline-color 0.2s ease-in-out;
    transition: background-color 0.3s ease-in-out;
  }

  *[data-shade="red"]     { --shade-color: #D50000; --shade-foreground:white; }
  *[data-shade="orange"]  { --shade-color: #FF5722; --shade-foreground:white; }
  *[data-shade="yellow"]  { --shade-color: #FFC107; --shade-foreground:black; }
  *[data-shade="green"]   { --shade-color: #7CB342; --shade-foreground:white; }
  *[data-shade="teal"]    { --shade-color: #009688; --shade-foreground:white; }
  *[data-shade="pink"]    { --shade-color: #C51162; --shade-foreground:white; }
  *[data-shade="purple"]  { --shade-color: #9C27B0; --shade-foreground:white; }
  *[data-shade="blue"]    { --shade-color: #3F51B5; --shade-foreground:white; }
  *[data-shade="cyan"]    { --shade-color: #2196F3; --shade-foreground:white; }
  *[data-shade="gray"]    { --shade-color: #9E9E9E; --shade-foreground:white; }
  *[data-shade="silver"]  { --shade-color: #607D8B; --shade-foreground:white; }
  *[data-shade="brown"]   { --shade-color: #795548; --shade-foreground:white; }
  *[data-shade="white"]   { --shade-color: #FAFAFA; --shade-foreground:black; }
  *[data-shade="black"]   { --shade-color: #212121; --shade-foreground:white; }

  &[data-active-tool="tExplore"]  
  { 
    .project { cursor:pointer; }
    .group .titlebar .tools {visibility: visible !important;}
  }
  &[data-active-tool="tRename"]
  {
    .group:not(.sealed) { .group-label, .project{ cursor:text; border:1px dashed var(--accent-color);} }
    .group.sealed { cursor: not-allowed;  > * { pointer-events: none; } }
  } 
  &[data-active-tool="tDelete"]
  {
    .group:not(.sealed) { .group-label, .project{ cursor:crosshair; border:1px dashed var(--danger-color);} }
    .group.sealed { cursor: not-allowed;  > * { pointer-events: none; } }
  } 
  &[data-active-tool="tMove"]
  {
    .group 
    {
      &:not(.dragged-item) .group-label,  //when move tool > grouplabel bordered (unless dragged itself)
      .project:not(.dragged-item)         //when move tool > project card bordered (unless dragged itself)
      {
        cursor:move; border:1px dashed var(--accent-color);
      } 
    }
    .group.sealed 
    { 
      //cursor: not-allowed;  
      .project {cursor:copy;}
      .dragup, .dragbefore, .dragdown, .dragafter  { pointer-events: none; display:none;} //TODO: remove double: currently this AND class ifn-sealed try to disable the hotspots, one is sufficient
    }
    &:not(.is-dragging) //hide dropzones unless dragging
    {
      .dragbefore, .dragafter  {display:none;}
    }
    &:not(.is-dragging-group) //hide dropzones unless dragging
    {
      .dragup, .dragdown  {display:none;}
    }
    // &.is-dragging, &.is-dragging-group  //show dropzones while dragging
    // {
    //   .dragup, .dragbefore {background-color:rgba(5, 238, 44, 0.473);} //debug visualization
    //   .dragdown, .dragafter {background-color:rgba(255, 0, 0, 0.473);} //debug visualization
    // }
  } 
  &:not([data-active-tool="tMove"])
  {
    .dragup, .dragbefore, .dragdown, .dragafter  {display:none;} //hide dropzones in tools other than move
  }
  &[data-active-tool="tPaint"]
  {
    .group { .group-label{ cursor:not-allowed; } }
    .group:not(.sealed) { .project{ cursor:url(%assetPath%/cursor-paint.png), auto; border:1px dashed var(--accent-color);} }
  } 

  .lucide
  {
    width: 19px;
    height: auto;
    stroke: currentColor; 
    fill: none;
    stroke-width: 1px;
    stroke-linecap: round;
    stroke-linejoin: round;
  }

  button
  {
    display: flex;
    padding: var(--ctrlspace);
    justify-content: center;
    align-items: center;

    cursor:pointer;

    color: var(--vscode-icon-foreground);
    background-color: transparent;
    &:hover { background-color: var(--vscode-toolbar-hoverBackground); }

    border: none;
    border-radius: var(--corner);

    span
    {
      margin-left: var(--ctrlspace);
      margin-right: var(--ctrlspace);
      padding-left: var(--ctrlspace);
      padding-right: var(--ctrlspace);
    }
  }

  .toolbar
  {
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--buttonsize);
    background-color: var(--vscode-activityBar-background);
    padding: var(--gapspace-s);
    border-right: 1px solid var(--vscode-activityBar-border);
    display: flex;
    flex-direction: column;
    gap:var(--ctrlspace);
    z-index: 99;

    .separator
    {
      border-bottom: 1px solid var(--vscode-activityBar-border);
      margin-left: calc(-1* var(--gapspace-s));
      margin-right: calc(-1* var(--gapspace-s));
      height: calc( var(--gapspace-s) / 2);
      margin-bottom: calc( var(--gapspace-s) / 2);
    }

    button
    {
      width:var(--buttonsize);
      height:var(--buttonsize);
      position: relative; //relevant for tooltip

      &.active
      {
        background-color: var(--vscode-toolbar-hoverBackground);
      }

      svg, > .tooltiptext {pointer-events: none; } //avoid that event.target is the button's content instead of the button itself

      .tooltiptext
      {
        visibility: hidden;
        max-width: 250px;
        width: max-content; 
        background-color: var(--vscode-activityBar-background);
        border:1px solid var(--vscode-activityBar-border);
        box-shadow: 0px 4px 8px rgba(0,0,0,0.3);        
        border-radius: var(--corner);
        padding: var(--gapspace-s);                

        text-align: left;
        font-family: Segoe WPC, Segoe UI, sans-serif;
        font-size: smaller;

        h1
        {
          padding:0; margin:0;
          font-size: small;
          light {font-weight: lighter;}
        }
        p:last-child
        {
          margin-bottom: 0; //otherwise the p's margin will add to tooltip's padding and make the gap too big
        }
      
        /* Position the tooltip */
        position: absolute;
        // z-index: 1;
        left: calc( var(--buttonsize) + var(--ctrlspace));
        top: calc( var(--buttonsize) + var(--ctrlspace));
      }
      &:hover .tooltiptext 
      {
        visibility: visible;
      }
    }

    .colorslot
    {
      position: absolute;
      bottom:0;
      right:0;

      width: var(--gapspace-s);
      height: var(--gapspace-s);
    }

    .colorslot, div[data-shade]
    {
      border-radius: 50%;
      border: 1px solid rgba(0, 0, 0, 0.3);
      cursor: pointer;        
      background-color:var(--shade-color);

      &[data-shade=""] // "clear" slot
      {
        background-image: linear-gradient(45deg, rgba(0, 0, 0, 0.3) 5.56%, transparent 5.56%, transparent 50%, rgba(0, 0, 0, 0.3) 50%, rgba(0, 0, 0, 0.3) 55.56%, transparent 55.56%, transparent 100%);
        background-size: 4px 4px;
      }
    }
    .palette
    {
      position: absolute;
      border: 1px solid var(--vscode-menu-border);
      min-width: 4px;
      min-height: 4px;
      background-color: var(--vscode-menu-background);
      box-shadow: 0px 3px 7px rgba(0, 0, 0, 0.2);
      top: 20px;
      left: 20px;
      border-radius: var(--corner);
      display: flex;
      flex-wrap: wrap;
      flex-direction: row;
      gap: var(--gapspace-s);
      padding: var(--gapspace-s);

      width: calc((var(--gapspace) + var(--gapspace-s))* 5 + 2px); //(color slot width + gap) * numberOfSlotsPerLine + paletteBorder
      div[data-shade]
      {
        width: var(--gapspace);
        height: var(--gapspace);
        cursor: pointer;
      }
    }
  }



  .content
  {
    position: absolute;
    left:calc(var(--buttonsize) + (2 * var(--gapspace-s)) + 1px);
    top:0;
    right:0;
    height: auto;
    // outline: 1px dotted fuchsia;
    padding:var(--gapspace);
    
    display: flex;
    flex-direction: column;
    gap:var(--gapspace);


    .col
    {
      display: flex;
      flex-direction: column;
      gap: var(--gapspace);
      padding-top: var(--gapspace);
      padding-bottom: var(--gapspace);
    }

    .group
    {
      margin-bottom:var(--gapspace);
      position: relative; //required for dropzones

      .titlebar
      {
        margin-bottom:var(--gapspace);
        display: flex;
        gap:var(--gapspace);

        .group-label //h1
        {
          // color:cornflowerblue;
          font-weight: 400;
          margin:0;
          margin-top: -4px; //temporary Bugfix as text is not in line with tools
          padding:0; //var(--gapspace-s);
          border-radius: var(--corner);
        }

        @at-root body.is-dragging // is currently in card-dragging operation
        {
          .group-label:hover //dragging over group label = show bottom line drop indicator
          { 
            border:none !important; 
            border-radius: 0 !important; 
            border-bottom: calc( 0.25 * var(--gapspace) ) solid var(--vscode-notebook-cellInsertionIndicator) !important; 
          }
        }

        .tools
        {
          visibility: hidden; //unless tool is explore
          display: flex;
          gap:var(--ctrlspace);
          button {aspect-ratio: 1;}
        }
        &:not(:hover) .hover-only button {visibility: hidden;}
      }
      &.dragged-item //for the dragged item itself, indicate visually, hide the hotspots/lock mouse interaction
      {
        opacity:0.5;
        pointer-events: none;
      }

      .dragup, .dragdown //mouse over drop zone -> draw insertion mark (via side-border)
      {
        width: 100%; 
        height: calc( 50% + var(--gapspace-s) );
        position: absolute;
        z-index: 1;
        &:hover {border-color: var(--vscode-notebook-cellInsertionIndicator);}
      }
      .dragup
      {              
        border-top: calc(  0.25 * var(--gapspace) ) solid transparent;
        margin-top: calc( -0.625 * var(--gapspace) );
        // background-color: rgba(255, 166, 0, 0.438);
      }

      .dragdown
      {
        bottom:0;
        border-bottom: calc(  0.25 * var(--gapspace) ) solid transparent;
        margin-bottom: calc( -0.625 * var(--gapspace) );
        // background-color: rgba(0, 255, 255, 0.479);
      }

      @at-root body.is-dragging, body.is-dragging-group 
      {
        .group.sealed //disable sealed group while dragging (it cannot be a droptarget)
        {
          opacity: 0.5;
          pointer-events: none;
          .group-label, .project {border:none !important;}
        }
      }

    }

    .projects
    {
      &.grid
      {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-content: flex-start;
        gap: var(--gapspace);

        .project //card
        {        
          width: 150px;
          height: 120px;
          display: flex;
          flex-direction: column;
          position: relative;
          //overflow: hidden; // no! this would hide the drag-drop indicator for move-mode!

          .pictoral
          {
            position: absolute;
            width: 100%; height: 100%;
            
            display: flex;
            justify-content: center;
            align-items: center;

            .icon
            {
              scale: 4;
              opacity: .2;
            }
          }

          .textblock
          {
            position: absolute;
            bottom:0;
            padding: var(--gapspace-s);

            flex-grow: 1;
            display: flex;
            align-items: flex-end;                    
  
            [data-field="project.label"]
            {
              // max-height: 50%;
  
              display: -webkit-box;
              -webkit-line-clamp: 6;
              -webkit-box-orient: vertical;
              overflow: hidden;
            }
          }

        }
      }
      
      &.list
      {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-items: flex-start;
        gap:var(--gapspace-s);

        .project
        {
          display: flex;
          flex-direction: row;
          flex-wrap: nowrap;
          max-width: 200px;
          width: 300px;
          // height:var(--gapspace);
          padding:var(--ctrlspace);
          gap: var(--ctrlspace);
          //overflow: hidden; // no! this would hide the drag-drop indicator for move-mode!
          position: relative;

          .pictoral
          {
            .icon
            {
              margin-top: 1px; margin-bottom: -1px; //visual fix, ... idk
            }
          }

          .textblock
          {
            flex-grow: 1;
            display: flex;
            align-items: baseline;
            padding-top: 1px; //visual fix, ... idk
  
            [data-field="project.label"]
            {
              display: -webkit-box;
              -webkit-line-clamp: 1;
              -webkit-box-orient: vertical;
              overflow: hidden;
              max-height: 100%;
            }
          }
        }
      }

      // all layouts:
      .project //card
      {        
        outline: 1px solid var(--vscode-editorWidget-border);
        box-shadow: 0 2px 5px 0 #9393932e;
        border-radius: var(--corner);
        background:var(--shade-color);
        color: var(--shade-foreground);
        button {color:var(--shade-foreground);}

        &:hover
        {
          outline-color: var(--accent-color);
        }

        .textblock
        {
          overflow:hidden;
        }

        &.dragged-item //for the dragged item itself, indicate visually, hide the hotspots/lock mouse interaction
        {
          opacity:0.5;
          pointer-events: none;            
        }

        .dragbefore, .dragafter //mouse over drop zone -> draw insertion mark (via side-border)
        {
          width: calc( 50% + var(--gapspace-s) );
          height: 100%;
          position: absolute;
          top:0;
          z-index: 1; //required for correct event overlapping
          //@at-root body.is-dragging
          //{
            &:hover {border-color: var(--vscode-notebook-cellInsertionIndicator);}
          //}
        }

        .dragbefore
        {
          left:calc( var(--gapspace-s) * 0.25);
          border-left: calc(  0.25 * var(--gapspace) ) solid transparent;
          margin-left: calc( -0.625 * var(--gapspace) );
        }
        .dragafter
        {
          right:calc( var(--gapspace-s) * 0.25);
          border-right: calc(  0.25 * var(--gapspace) ) solid transparent;
          margin-right: calc( -0.625 * var(--gapspace) );
        }
      }
    }
  }

} //.landingpage

